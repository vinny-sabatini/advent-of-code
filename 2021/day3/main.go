package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
)

// Day 3 challenge 1 takes in an input file of many lines of binary numbers
// The "gamma rate" is generated by the most common bits at each location
// The "epsilon rate" is generated by the least common bits at each location
// The "power consumption" is generated by multiplying gamma rate by epsilon rate
// Using `small-input.txt`, gamma rate = 10110 (22), episilon rate = 01001 (9), total = 198.

func main() {
	input, err := os.Open("./input.txt")
	if err != nil {
		fmt.Println("Failed to open input.txt", err)
		os.Exit(1)
	}
	defer input.Close()

	scanner := bufio.NewScanner(input)

	var tracker []int

	for scanner.Scan() {
		line := scanner.Text()
		if len(tracker) == 0 {
			tracker = make([]int, len(line))
		}
		for index, bit := range line {
			if string(bit) == "0" {
				tracker[index] = tracker[index] - 1
			} else {
				tracker[index] = tracker[index] + 1
			}
		}
	}
	if err := scanner.Err(); err != nil {
		fmt.Println("Failed to scan input:", err)
		os.Exit(1)
	}

	var gammaString, episilonString string = "", ""
	for _, bit := range tracker {
		if bit < 0 {
			gammaString = gammaString + "0"
			episilonString = episilonString + "1"
		} else {
			gammaString = gammaString + "1"
			episilonString = episilonString + "0"
		}
	}
	gammaValue, err := strconv.ParseInt(gammaString, 2, 64)
	if err != nil {
		fmt.Println("Failed to generate Gamma value", err)
	}
	episilonValue, err := strconv.ParseInt(episilonString, 2, 64)
	if err != nil {
		fmt.Println("Failed to generate Episilon value", err)
	}

	fmt.Printf("Gamma = %d, Episilon = %d, Power = %d\n", gammaValue, episilonValue, (gammaValue * episilonValue))
}
